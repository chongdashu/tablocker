name: Deploy - Frontend

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: "main"

jobs:
  deploy-frontend:
    name: Deploy Frontend to Environment
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Copy frontend build to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          AWS_HOST: ${{ secrets.AWS_HOST }}
          AWS_USER: ${{ secrets.AWS_USER }}
          PROJECT_ROOT: /home/${{ secrets.AWS_USER }}/untab
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key $AWS_USER@$AWS_HOST "mkdir -p $PROJECT_ROOT/frontend"
          scp -o StrictHostKeyChecking=no -i private_key -r frontend/dist/* $AWS_USER@$AWS_HOST:$PROJECT_ROOT/frontend/
          rm private_key

      - name: Update docker-compose and restart services
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          AWS_HOST: ${{ secrets.AWS_HOST }}
          AWS_USER: ${{ secrets.AWS_USER }}
          PROJECT_ROOT: /home/${{ secrets.AWS_USER }}/untab
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${AWS_USER}@${AWS_HOST} '
            cd ${{ env.PROJECT_ROOT }};
            docker-compose down;
            docker-compose up -d;
          '
          rm private_key

      - name: Verify External Accessibility
        run: |
          echo "Waiting for Nginx to start..."
          sleep 10

          echo "Verifying external accessibility..."
          if curl -sSf https://untab.xyz > /dev/null 2>&1; then
            echo "External HTTPS accessibility verified successfully!"
          else
            echo "Failed to verify external accessibility"
            exit 1
          fi
